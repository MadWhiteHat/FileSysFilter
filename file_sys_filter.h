#ifndef _FILESYS_FILTER_H
#define _FILESYS_FILTER_H

// windows data types
#if defined( _CONSOLE_APP)
#include <basetsd.h>
#elif defined(_DRIVER)
#include <windef.h>
#endif

#define DRIVER_NAME L"filesysDriver"
#define DRIVER_CDO_NAME L"\\Device\\" DRIVER_NAME
#define DRIVER_USERMODE_NAME L"\\??\\" DRIVER_NAME

#define IOCTL_ADD_RULE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 0), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_DEL_RULE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 1), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_SET_LOAD_IMAGE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 2), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_REMOVE_LOAD_IMAGE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 3), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)

// Error codes
#define FSFLT_ERROR_SUCCESS 0L
#define FSFLT_ERROR_STATE \
  (1L << 31)
#define FSFLT_DRIVER_ERROR_LOG_FILE_ALREADY_OPENED \
  (1L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOG_FILE_NOT_OPENED \
  (2L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOG_FILE_CREATE_FAILED \
  (3L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_SET_LOAD_IMAGE \
  (4L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_ALREADY_SET \
  (5L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_REMOVE \
  (6L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_ALREADY_REMOVED \
  (7L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_OPEN_RULES_FILE \
  (8L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_READ_RULES \
  (9L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_WRITE_RULES \
  (10L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_PARSE_RULES \
  (11L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_INVALID_PERMISSIONS \
  (12L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_LIST_EMPTY \
  (13L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_LIST_INVALID_RANGE \
  (14L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_SCM \
  (15L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_SERVICE \
  (16L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_START_SERVICE \
  (17L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_STOP_SERVICE \
  (18L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_QUERY_SERVICE_STATE \
  (19L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_SERVICE_ALREADY_INSTALLED \
  (20L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_SERVICE_ALREADY_UNINSTALLED \
  (21L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_GET_FULL_PATH \
  (22L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_MEMORY_ALLOC \
  (23L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_INVALID_PARAMETER \
  (24L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_DRIVER_BY_LINK \
  (25L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_SEND_IOCTL \
  (26L | FSFLT_ERROR_STATE)

#define FSFLT_SUCCESS(STATUS) \
  !(STATUS & FSFLT_ERROR_STATE)


// Availble operations
#define PROCESS_BUFFER_SIZE  (1L << 8)
#define FILE_BUFFER_SIZE  (1L << 8)
#define MASK_ALLOW_READ 1L
#define MASK_ALLOW_WRITE (1L << 1)

typedef struct _DRIVER_IO {
  DWORD _result;
  union {
    DWORD _ruleDelNum;
    struct {
      WCHAR _procName[PROCESS_BUFFER_SIZE];
      WCHAR _fileName[FILE_BUFFER_SIZE];
      DWORD _accessMask;
    } _ruleAddInfo;
  } _type;
} DRIVER_IO, *PDRIVER_IO;

#endif // !_FILESYS_FILTER_H
