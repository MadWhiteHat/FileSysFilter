#ifndef _FILESYS_FILTER_H
#define _FILESYS_FILTER_H

// windows data types
#if defined (_CONSOLE_APP)
#include <windows.h>
#elif defined(_DRIVER)
#include <windef.h>
#endif

#define DRIVER_NAME L"filesysDriver"
#define DRIVER_CDO_NAME L"\\Device\\" DRIVER_NAME
#define DRIVER_USERMODE_NAME L"\\??\\" DRIVER_NAME

#define IOCTL_PRINT_RULES \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0X800 + 0), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_ADD_RULE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0X800 + 1), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_DEL_RULE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 2), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_CLEAR_RULES \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 3), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_SET_LOAD_IMAGE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 4), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)
#define IOCTL_REMOVE_LOAD_IMAGE \
CTL_CODE ( \
  FILE_DEVICE_UNKNOWN, \
  (0x800 + 5), \
  METHOD_BUFFERED, \
  FILE_SPECIAL_ACCESS \
)

// Error codes
#define FSFLT_ERROR_SUCCESS 0x00L
#define FSFLT_ERROR_STATE \
  (0x01L << 31)

// DRIVER: Log file related errors
#define FSFLT_DRIVER_ERROR_LOG_FILE_ALREADY_OPENED \
  (0x01L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOG_FILE_NOT_OPENED \
  (0x02L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOG_FILE_CREATE_FAILED \
  (0x03L | FSFLT_ERROR_STATE)

// DRIVER: Rules related errors
#define FSFLT_DRIVER_ERROR_ADD_ACE_MEMORY_ALLOC \
  (0x04L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_ACE_GET_PROCESS_NAME_LENGTH \
  (0x05L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_ACE_COPY_PROCESS_NAME \
  (0x06L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ACE_INVALID_NODE_PTR \
  (0x07L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ACE_INVALID_LIST \
  (0x08L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_ACL_MEMORY_ALLOC \
  (0x09L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_ACL_GET_FILE_NAME_LENGTH \
  (0x0aL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_ACL_COPY_FILE_NAME \
  (0x0bL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ACL_INVALID_HEAD_PTR \
  (0x0cL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ACL_INVALID_NODE_PTR \
  (0x0dL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ACL_INVALID_LIST \
  (0x0eL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_INVALID_LIST_PTR \
  (0x0fL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_INVALID_FILE_NAME \
  (0x10L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_INVALID_PROCESS_NAME \
  (0x11L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_INVALID_ACCESS_MASK \
  (0x12L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_FIND_ACL \
  (0x13L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_ADD_RULE_ACE_ALREADY_EXISTS \
  (0x14L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_RULE_INVALID_LIST_PTR \
  (0x15L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_RULE_INVALID_FILE_NAME \
  (0x16L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_RULE_INVALID_PROCESS_NAME \
  (0x17L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_RULE_FIND_ACL \
  (0x18L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_RULE_FIND_ACE \
  (0x19L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_DEL_ALL_RULES_INVALID_LIST_PTR \
  (0x1aL | FSFLT_ERROR_STATE)

// DRIVER: LoadImage notifier related errors
#define FSFLT_DRIVER_ERROR_SET_LOAD_IMAGE \
  (0x1bL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_ALREADY_SET \
  (0x1cL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_REMOVE \
  (0x1dL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_ERROR_LOAD_IMAGE_ALREADY_REMOVED \
  (0x1eL | FSFLT_ERROR_STATE)

// CONSOLE: Controller related errors
#define FSFLT_CONTROLLER_ERROR_OPEN_RULES_FILE \
  (0x1fL | FSFLT_ERROR_STATE)
#define FSFLT_CONTROLLER_ERROR_READ_RULES \
  (0x20L | FSFLT_ERROR_STATE)
#define FSFLT_CONTROLLER_ERROR_PARSE_RULES \
  (0x22L | FSFLT_ERROR_STATE)
#define FSFLT_CONTROLLER_ERROR_INVALID_PERMISSIONS \
  (0x23L | FSFLT_ERROR_STATE)

// CONSOLE: Rules related errors
#define FSFLT_RULES_ERROR_LIST_EMPTY \
  (0x24L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_LIST_INVALID_RANGE \
  (0x25L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_INVALID_PARAMETERS \
  (0x26L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_INVALID_PERMISSIONS \
  (0x23L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_OPEN_RULES_FILE \
  (0x24L | FSFLT_ERROR_STATE)
#define FSFLT_RULES_ERROR_WRITE_RULES \
  (0x25L | FSFLT_ERROR_STATE)

// CONSOLE: driver control related errors
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_SCM \
  (0x27L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_SERVICE \
  (0x28L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_START_SERVICE \
  (0x29L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_STOP_SERVICE \
  (0x2aL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_QUERY_SERVICE_STATE \
  (0x2bL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_SERVICE_ALREADY_INSTALLED \
  (0x2cL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_SERVICE_ALREADY_UNINSTALLED \
  (0x2dL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_GET_FULL_PATH \
  (0x2eL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_MEMORY_ALLOC \
  (0x2fL | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_INVALID_PARAMETER \
  (0x30L | FSFLT_ERROR_STATE)
#define FSFLT_DRIVER_CONTROL_ERROR_OPEN_DRIVER_BY_LINK \
  (0x31L | FSFLT_ERROR_STATE)

#define FSFLT_SUCCESS(STATUS) \
  !(STATUS & FSFLT_ERROR_STATE)


// Availble operations
#define PROCESS_BUFFER_SIZE  (1L << 8)
#define FILE_BUFFER_SIZE  (1L << 8)
#define FUNC_BUFFER_SIZE  (1L << 8)
#define MASK_ALLOW_READ 1L
#define MASK_ALLOW_WRITE (1L << 1)
#define MASK_ALLOW_ALL (MASK_ALLOW_READ | MASK_ALLOW_WRITE)


typedef struct _RESULT {
  WCHAR _funcName[FUNC_BUFFER_SIZE];
  DWORD _winErrCode;
  DWORD _internalErrCode;
} RESULT, *PRESULT;

typedef struct _DRIVER_IO {
  RESULT _result;
  struct {
    WCHAR _fileName[FILE_BUFFER_SIZE];
    WCHAR _procName[PROCESS_BUFFER_SIZE];
    DWORD _accessMask;
  } _ruleInfo;
} DRIVER_IO, *PDRIVER_IO;

extern void
InitResult(
  PRESULT __res,
  LPCWSTR __funcName,
  DWORD __winErrCode,
  DWORD __internalErrCode
);

#endif // !_FILESYS_FILTER_H
